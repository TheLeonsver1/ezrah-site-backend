type Query {
    loggedInUser: LoggedInUser
    getBills: [Bill]
    getBill(id:ID!): Bill
    getPosts: [UserPost]
    getPost(id:ID!): UserPost
    getBillComments(billId:ID!, paging: Paging): [UserPost]
}

type Mutation {
    addBillComment(billId:ID!, commentText:String): UserPost
}

input Paging {
    page: Int = 0,
    size: Int = 10,
    sort: Sort
}

enum Sort {
    ASC,
    DESC
}

type LoggedInUser {
    userId: ID,
    isLoggedIn:Boolean,
    userName: String,
}

type Bill {
    id: ID!,
    knsId: ID!,
    knessetNum: Int,
    name: String!,
    privateNumber: Int,
    governmentalNumber: Int,
    officialLawSummary: String,
    publicationDate: LocalDateTime,
    knsLastUpdatedDate: LocalDateTime,
    status: Status,
    subType: ItemType,
    billInitiators: [BillInitiator]
}

type BillInitiator {
    id: ID!,
    bill:Bill!,
    person: Person!,
    isInitiator: Boolean,
    ordinal: Int
}

type Person {
    id:ID!,
    firstName: String,
    lastName:String,
    email: String,
    billsInitiated: [BillInitiator],
    positionHistory: [PersonPosition],
}

type PersonPosition {
    id: ID!,
    person: Person,
    position: Position,
    knessetNum: Int
    startDate:LocalDateTime,
    finishDate:LocalDateTime,
}

type Position {
    id: ID!,
}

type Status {
    id: ID!,
    description: String,
}

type ItemType {
    id: ID!,
    description: String,
}

type UserPost {
    id: ID!,
    childComments: [UserPost],
    createdDate: LocalDateTime,
    lastModifiedDate: LocalDateTime,
    latestContentVersion: String,
    postCreator: User,
    bill: Bill,
    happyCount: Int,
    sadCount: Int,
    angryCount: Int,
    enlightenedCount: Int,
    surprisedCount: Int,
}

type User {
    id: ID!,
    username: String,
}

# java.time.LocalDate implementation
scalar LocalDate

# java.time.LocalDateTime implementation
scalar LocalDateTime

# java.time.LocalTime implementation
scalar LocalTime
